import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DatabaseManager:
    def __init__(self, db_path='fitness_bot.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∫–µ—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS health_questionnaire (
                user_id INTEGER PRIMARY KEY,
                age INTEGER,
                weight REAL,
                height REAL,
                gender TEXT,
                fitness_level TEXT,
                goals TEXT,
                injuries TEXT,
                limitations TEXT,
                sleep_hours INTEGER,
                stress_level INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS workouts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                workout_name TEXT,
                duration INTEGER,
                calories_burned INTEGER,
                date DATE DEFAULT CURRENT_DATE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–∏—Ç–∞–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS nutrition (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                food_name TEXT,
                calories INTEGER,
                protein REAL,
                carbs REAL,
                fat REAL,
                meal_type TEXT,
                date DATE DEFAULT CURRENT_DATE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS challenges (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                goal_type TEXT,
                goal_value INTEGER,
                reward_points INTEGER,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.initialize_sample_data(cursor)
        
        conn.commit()
        conn.close()
    
    def initialize_sample_data(self, cursor):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        # –ë–∞–∑–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
        challenges = [
            ('–ù–µ–¥–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é', 'workouts', 5, 100),
            ('–°–∏–ª–æ–≤–æ–π –≤—ã–∑–æ–≤', '–£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–±–æ—á–∏–π –≤–µ—Å –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö', 'weight', 1, 150),
            ('–ö–∞—Ä–¥–∏–æ –º–∞—Ä–∞—Ñ–æ–Ω', '–°–æ–∂–≥–∏—Ç–µ 2000 –∫–∞–ª–æ—Ä–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é', 'calories', 2000, 200)
        ]
        
        for challenge in challenges:
            cursor.execute('''
                INSERT OR IGNORE INTO challenges (name, description, goal_type, goal_value, reward_points)
                VALUES (?, ?, ?, ?, ?)
            ''', challenge)

class FitnessBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.db = DatabaseManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("health", self.health_questionnaire))
        self.application.add_handler(CommandHandler("nutrition", self.nutrition_dashboard))
        self.application.add_handler(CommandHandler("workout", self.workout_tracking))
        self.application.add_handler(CommandHandler("challenges", self.show_challenges))
        self.application.add_handler(CommandHandler("progress", self.show_progress))
        self.application.add_handler(CommandHandler("profile", self.show_profile))
        
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        conn = sqlite3.connect('fitness_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
        conn.close()
        
        welcome_text = f"""
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitnessBot, {user.first_name}!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º! ü§ñ

‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>

‚Ä¢ üìä <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è</b> - —É—á—ë—Ç –≤–∞—à–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ü–µ–ª–µ–π
‚Ä¢ üçé <b>–¢—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è –∏ –∫–∞–ª–æ—Ä–∏–π</b> - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ë–ñ–£
‚Ä¢ üí™ <b>–¢—Ä–µ–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ üèÜ <b>–ß–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> - –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á—ë—Ç—ã
‚Ä¢ üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ —Å –∞–Ω–∫–µ—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è:</b>
"""
        
        keyboard = [
            [InlineKeyboardButton("üè• –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–¥–æ—Ä–æ–≤—å—è", callback_data="health_start")],
            [InlineKeyboardButton("üçé –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ", callback_data="nutrition_start")],
            [InlineKeyboardButton("üí™ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="workout_start")],
            [InlineKeyboardButton("üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="challenges_view")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress_view")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def health_questionnaire(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∫–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        user = update.effective_user
        
        health_text = """
üè• <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è</b>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã:</b>
‚Ä¢ ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–∞–º
‚Ä¢ üéØ –£—á—ë—Ç —Ç—Ä–∞–≤–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π  
‚Ä¢ üìä –¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£
‚Ä¢ üí° –°–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é

–ù–∞—á–Ω—ë–º?
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="health_start")],
            [InlineKeyboardButton("üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="health_view")],
            [InlineKeyboardButton("‚ö° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="health_skip")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(health_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def nutrition_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è"""
        nutrition_text = """
üçé <b>–£–º–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è</b>

–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–∞—à–∏–º —Ä–∞—Ü–∏–æ–Ω–æ–º:

<b>–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üî• –ö–∞–ª–æ—Ä–∏–∏: 0/2000 –∫–∫–∞–ª
‚Ä¢ üí™ –ë–µ–ª–∫–∏: 0/150–≥ 
‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: 0/250–≥
‚Ä¢ ü•ë –ñ–∏—Ä—ã: 0/65–≥

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –±–ª—é–¥
‚Ä¢ üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –ë–ñ–£
‚Ä¢ üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–ª—è–º
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏
"""
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data="add_meal")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è", callback_data="nutrition_stats")],
            [InlineKeyboardButton("üéØ –¶–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é", callback_data="nutrition_goals")],
            [InlineKeyboardButton("üìù –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="my_foods")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(nutrition_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def workout_tracking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢—Ä–µ–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        workout_text = """
üí™ <b>–¢—Ä–µ–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>

–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å:

<b>–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ ‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: 0
‚Ä¢ ‚è±Ô∏è –í—Ä–µ–º—è: 0 –º–∏–Ω
‚Ä¢ üî• –°–æ–∂–∂–µ–Ω–æ: 0 –∫–∫–∞–ª

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üèãÔ∏è‚Äç‚ôÇÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
‚Ä¢ üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò
"""
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_workout")],
            [InlineKeyboardButton("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data="exercise_library")],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workout_history")],
            [InlineKeyboardButton("üéØ –ú–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="my_programs")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(workout_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def show_challenges(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏"""
        challenges_text = """
üèÜ <b>–°–∏—Å—Ç–µ–º–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</b>

–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:</b>

1. üí™ <b>–ù–µ–¥–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>
   –¶–µ–ª—å: 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
   –ü—Ä–æ–≥—Ä–µ—Å—Å: ‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ± 60%
   –ù–∞–≥—Ä–∞–¥–∞: 100 –æ—á–∫–æ–≤

2. üî• <b>–°–∏–ª–æ–≤–æ–π –≤—ã–∑–æ–≤</b>
   –¶–µ–ª—å: –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –≤–µ—Å–∞
   –ü—Ä–æ–≥—Ä–µ—Å—Å: ‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ± 40%
   –ù–∞–≥—Ä–∞–¥–∞: 150 –æ—á–∫–æ–≤

3. üèÉ‚Äç‚ôÇÔ∏è <b>–ö–∞—Ä–¥–∏–æ –º–∞—Ä–∞—Ñ–æ–Ω</b>
   –¶–µ–ª—å: 2000 –∫–∞–ª–æ—Ä–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é
   –ü—Ä–æ–≥—Ä–µ—Å—Å: ‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ± 20%
   –ù–∞–≥—Ä–∞–¥–∞: 200 –æ—á–∫–æ–≤

<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å: 3</b> (450/600 XP)
"""
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data="join_challenge")],
            [InlineKeyboardButton("üèÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="my_achievements")],
            [InlineKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
            [InlineKeyboardButton("üéÅ –ù–∞–≥—Ä–∞–¥—ã", callback_data="rewards")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(challenges_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def show_progress(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        progress_text = """
üìä <b>–í–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ–≥—Ä–µ—Å—Å</b>

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:</b>
‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: 12
‚Ä¢ üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã: +15%
‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: 8,500
‚Ä¢ ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 45 –º–∏–Ω

<b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞:</b>
‚Ä¢ ü•á –ü–æ–±–∏—Ç –ª–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –≤ –∂–∏–º–µ –ª–µ–∂–∞
‚Ä¢ üî• –°–∞–º–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
‚Ä¢ üìÖ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å–∞ –Ω–∞ 5%
‚Ä¢ üçé –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞
‚Ä¢ üßò –î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—Ç—è–∂–∫—É –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
"""
        
        keyboard = [
            [InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workout_calendar")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton("ü§ñ AI –ê–Ω–∞–ª–∏–∑", callback_data="ai_analysis")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(progress_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: {user.id}

<b>–§–∏—Ç–Ω–µ—Å-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: 3
‚Ä¢ –û–ø—ã—Ç: 450/600 XP
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 12
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: 3 –¥–Ω—è

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ
‚Ä¢ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
            [InlineKeyboardButton("üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data="my_goals")],
            [InlineKeyboardButton("üìä –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reset_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback
        if callback_data == "health_start":
            await query.edit_message_text("üè• <b>–ê–Ω–∫–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã...", parse_mode='HTML')
        elif callback_data == "nutrition_start":
            await self.nutrition_dashboard(update, context)
        elif callback_data == "challenges_view":
            await self.show_challenges(update, context)
        elif callback_data == "progress_view":
            await self.show_progress(update, context)
        else:
            await query.edit_message_text(f"üîß <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n–†–∞–∑–¥–µ–ª '{callback_data}' —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!", parse_mode='HTML')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text.lower()
        
        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if any(word in user_message for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'start']):
            await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        elif any(word in user_message for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks']):
            await update.message.reply_text("ü§ù –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
        elif any(word in user_message for word in ['—Ç—Ä–µ–Ω', 'workout']):
            await self.workout_tracking(update, context)
        elif any(word in user_message for word in ['–µ–¥–∞', '–ø–∏—Ç–∞–Ω–∏–µ', 'food']):
            await self.nutrition_dashboard(update, context)
        elif any(word in user_message for word in ['–∑–¥–æ—Ä', 'health']):
            await self.health_questionnaire(update, context)
        else:
            await update.message.reply_text("ü§ñ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/health - –ó–¥–æ—Ä–æ–≤—å–µ\n/nutrition - –ü–∏—Ç–∞–Ω–∏–µ\n/workout - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n/challenges - –ß–µ–ª–ª–µ–Ω–¥–∂–∏\n/progress - –ü—Ä–æ–≥—Ä–µ—Å—Å")

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

<b>–§–∏—Ç–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–∏:</b>
/health - –ê–Ω–∫–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
/nutrition - –¢—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è –∏ –∫–∞–ª–æ—Ä–∏–π
/workout - –¢—Ä–µ–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/challenges - –ß–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/progress - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.

‚ú® <b>–°–æ–≤–µ—Ç:</b> –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–Ω—è—Ç—å!
"""
        await update.message.reply_text(help_text, parse_mode='HTML')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("FitnessBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("ü§ñ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        self.application.run_polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    BOT_TOKEN = os.environ.get('BOT_TOKEN', '8285829471:AAGehHp9CC1r6j1F7UArlcwUPG6Rex2RGMo')
    
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ")
        exit(1)
    
    bot = FitnessBot(BOT_TOKEN)
    bot.run()