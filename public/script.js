document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.expand();
    tg.enableClosingConfirmation();

    const BACKEND_URL = window.location.hostname.includes('render.com') 
        ? window.location.origin
        : 'http://localhost:3000';

    let appData = {
        plan: [],
        weekDates: [],
        weekNumber: 0,
        stats: {}
    };
    let currentEditingDayIndex = null;
    const dayNames = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"];
    const monthNames = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    function initTheme() {
        const savedTheme = localStorage.getItem('theme') || 'dark';
        document.body.classList.toggle('light-theme', savedTheme === 'light');
        document.getElementById('theme-toggle').checked = savedTheme === 'light';
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const oldNotifications = document.querySelectorAll('.notification');
        oldNotifications.forEach(notif => {
            notif.style.opacity = '0';
            setTimeout(() => notif.remove(), 300);
        });

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'error' ? '#f44336' : '#4CAF50'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            max-width: 300px;
            word-wrap: break-word;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        `;
        
        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        });

        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 3000);
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        document.getElementById(screenId).classList.add('active');
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ª–∞–≥–æ–≤
    function openModal(modalElement) {
        modalElement.style.display = 'flex';
        modalElement.style.opacity = '0';
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
        modalElement.offsetHeight;
        
        requestAnimationFrame(() => {
            modalElement.style.opacity = '1';
            modalElement.classList.add('active');
        });
    }

    function closeModal(modalElement) {
        modalElement.style.opacity = '0';
        modalElement.classList.remove('active');
        
        setTimeout(() => {
            if (!modalElement.classList.contains('active')) {
                modalElement.style.display = 'none';
            }
        }, 300);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    function formatDate(dateString) {
        const date = new Date(dateString);
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);

        if (date.toDateString() === today.toDateString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        }
        if (date.toDateString() === tomorrow.toDateString()) {
            return '–ó–∞–≤—Ç—Ä–∞';
        }

        return `${date.getDate()} ${monthNames[date.getMonth()]}`;
    }

    function formatWeekRange(weekDates) {
        if (!weekDates || weekDates.length === 0) return '';
        
        const start = new Date(weekDates[0]);
        const end = new Date(weekDates[6]);
        
        if (start.getMonth() === end.getMonth()) {
            return `${start.getDate()}-${end.getDate()} ${monthNames[start.getMonth()]}`;
        } else {
            return `${start.getDate()} ${monthNames[start.getMonth()]} - ${end.getDate()} ${monthNames[end.getMonth()]}`;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('menu-plan-btn').addEventListener('click', () => {
        renderWeekPlan();
        showScreen('plan-screen');
    });

    document.getElementById('menu-groups-btn').addEventListener('click', () => {
        loadUserGroups();
        showScreen('groups-screen');
    });

    document.getElementById('menu-leaderboard-btn').addEventListener('click', () => {
        loadLeaderboard();
        showScreen('leaderboard-screen');
    });

    document.getElementById('menu-analytics-btn').addEventListener('click', () => {
        loadAnalytics();
        showScreen('analytics-screen');
    });

    document.getElementById('menu-settings-btn').addEventListener('click', () => {
        openModal(document.getElementById('settings-modal'));
    });

    document.querySelectorAll('.back-button').forEach(button => {
        button.addEventListener('click', () => showScreen('home-screen'));
    });

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    document.getElementById('load-default-plan').addEventListener('click', async () => {
        try {
            showNotification('–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω...', 'success');
            
            const response = await fetch(`${BACKEND_URL}/api/load-default-plan`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();
            
            if (response.ok) {
                await loadPlan();
                showNotification('‚úÖ –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.');
            } else {
                showNotification(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞', 'error');
            }
        } catch (error) {
            console.error('Error loading default plan:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞', 'error');
        }
    });

    // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    async function loadUserGroups() {
        try {
            const response = await fetch(`${BACKEND_URL}/api/groups/user/1`);
            if (response.ok) {
                const data = await response.json();
                renderGroupsList(data.groups);
            }
        } catch (error) {
            console.error('Error loading groups:', error);
        }
    }

    function renderGroupsList(groups) {
        const container = document.getElementById('groups-list-container');
        container.innerHTML = '';

        if (!groups || groups.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!</p>
                </div>
            `;
            return;
        }

        groups.forEach(group => {
            const groupCard = document.createElement('div');
            groupCard.className = 'group-card';
            groupCard.innerHTML = `
                <div class="group-header">
                    <h4>${group.name}</h4>
                    <span class="member-count">üë• ${group.member_count}</span>
                </div>
                <div class="group-description">${group.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
                <button class="btn-secondary" onclick="openGroupDetail(${group.id})">
                    –û—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É
                </button>
            `;
            container.appendChild(groupCard);
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö
    window.switchGroupTab = function(tabName) {
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        document.getElementById(`${tabName}-tab`).classList.add('active');
        event.target.classList.add('active');
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    document.getElementById('create-group-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const name = document.getElementById('group-name').value;
        const description = document.getElementById('group-description').value;
        const planType = document.getElementById('group-plan-type').value;
        
        if (!name.trim()) {
            showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã', 'error');
            return;
        }

        try {
            showNotification('–°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É...', 'success');
            
            const response = await fetch(`${BACKEND_URL}/api/groups/create`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    name: name.trim(),
                    description: description.trim(),
                    plan_type: planType,
                    creator_id: 1
                })
            });
            
            const result = await response.json();
            
            if (response.ok) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
                try {
                    await navigator.clipboard.writeText(result.invite_code);
                    showNotification(`‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ "${result.invite_code}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!`);
                } catch (copyError) {
                    // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ clipboard API
                    const textArea = document.createElement('textarea');
                    textArea.value = result.invite_code;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    showNotification(`‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: ${result.invite_code} (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é)`);
                }
                
                document.getElementById('create-group-form').reset();
                showScreen('groups-screen');
                loadUserGroups();
            } else {
                showNotification(result.error || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã', 'error');
            }
        } catch (error) {
            console.error('Error creating group:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã', 'error');
        }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ
    document.getElementById('join-group-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const inviteCode = document.getElementById('invite-code').value.toUpperCase().trim();
        
        if (!inviteCode) {
            showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 'error');
            return;
        }

        try {
            const response = await fetch(`${BACKEND_URL}/api/groups/join`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    invite_code: inviteCode,
                    user_id: 1
                })
            });
            
            const result = await response.json();
            
            if (response.ok) {
                showNotification(`‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ "${result.group_name}"`);
                document.getElementById('invite-code').value = '';
                showScreen('groups-screen');
                loadUserGroups();
            } else {
                showNotification(result.error || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ', 'error');
            }
        } catch (error) {
            console.error('Error joining group:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ', 'error');
        }
    });

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã
    window.openGroupDetail = function(groupId) {
        fetch(`${BACKEND_URL}/api/groups/${groupId}`)
            .then(response => {
                if (!response.ok) throw new Error('Group not found');
                return response.json();
            })
            .then(data => {
                renderGroupDetail(data);
                showScreen('group-detail-screen');
            })
            .catch(error => {
                console.error('Error loading group details:', error);
                showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã', 'error');
            });
    };

    function renderGroupDetail(data) {
        document.getElementById('group-detail-title').textContent = data.group.name;
        const container = document.getElementById('group-detail-container');
        
        container.innerHTML = `
            <div class="group-info">
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${data.group.description || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                <p><strong>–¢–∏–ø –ø–ª–∞–Ω–∞:</strong> ${data.group.plan_type === 'week' ? '–ù–µ–¥–µ–ª—å–Ω—ã–π' : '–ú–µ—Å—è—á–Ω—ã–π'}</p>
                <p><strong>–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</strong> <code>${data.group.invite_code}</code></p>
            </div>
            <div class="members-list">
                <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏ (${data.members.length})</h4>
                ${data.members.map(member => `
                    <div class="member-item">
                        <span>${member.first_name}</span>
                        <small>${member.username ? '@' + member.username : ''}</small>
                    </div>
                `).join('')}
            </div>
        `;
    }

    // –õ–∏–¥–µ—Ä–±–æ—Ä–¥
    async function loadLeaderboard() {
        try {
            const response = await fetch(`${BACKEND_URL}/api/leaderboard`);
            if (response.ok) {
                const data = await response.json();
                renderLeaderboard(data.leaders);
            }
        } catch (error) {
            console.error('Error loading leaderboard:', error);
        }
    }

    function renderLeaderboard(leaders) {
        const container = document.getElementById('leaderboard-container');
        container.innerHTML = '';

        if (!leaders || leaders.length === 0) {
            container.innerHTML = '<div class="empty-state"><p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤</p></div>';
            return;
        }

        leaders.forEach((leader, index) => {
            const rank = index + 1;
            const leaderItem = document.createElement('div');
            leaderItem.className = 'leader-item';
            leaderItem.innerHTML = `
                <div class="leader-rank">${rank}</div>
                <div class="leader-info">
                    <div class="leader-name">${leader.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                    <div class="leader-stats">
                        ${leader.total_workout_days} –¥–Ω–µ–π ‚Ä¢ –°—Ç—Ä–∏–∫: ${leader.current_streak}
                    </div>
                </div>
                <div class="leader-badge">
                    ${rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : 'üèÖ'}
                </div>
            `;
            container.appendChild(leaderItem);
        });
    }

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    async function loadAnalytics() {
        try {
            const response = await fetch(`${BACKEND_URL}/api/analytics/1`);
            if (response.ok) {
                const data = await response.json();
                renderAnalytics(data);
            }
        } catch (error) {
            console.error('Error loading analytics:', error);
        }
    }

    function renderAnalytics(data) {
        document.getElementById('stat-days-analytics').textContent = data.leader_stats?.total_workout_days || 0;
        document.getElementById('stat-weeks-analytics').textContent = Math.floor((data.leader_stats?.total_workout_days || 0) / 7);
        document.getElementById('stat-total-analytics').textContent = data.leader_stats?.total_workout_days || 0;
        document.getElementById('stat-streak-analytics').textContent = data.leader_stats?.current_streak || 0;
        document.getElementById('stat-best-streak').textContent = data.leader_stats?.longest_streak || 0;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('theme-toggle').addEventListener('change', function() {
        const isLight = this.checked;
        document.body.classList.toggle('light-theme', isLight);
        localStorage.setItem('theme', isLight ? 'light' : 'dark');
        showNotification('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞');
    });

    document.getElementById('timezone-select').addEventListener('change', function() {
        localStorage.setItem('timezone', this.value);
        showNotification('üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    });

    // –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    async function loadPlan() {
        try {
            const response = await fetch(`${BACKEND_URL}/api/plan`);
            if (response.ok) {
                const data = await response.json();
                appData.plan = data.plan;
                appData.weekDates = data.weekDates;
                appData.weekNumber = data.weekNumber;
                renderWeekPlan();
            }
        } catch (error) {
            console.error('Error loading plan:', error);
        }
    }

    function renderWeekPlan() {
        const container = document.getElementById('week-plan-container');
        const weekInfo = document.getElementById('week-info');
        container.innerHTML = '';
        
        if (appData.weekDates && appData.weekDates.length > 0) {
            weekInfo.textContent = `–ù–µ–¥–µ–ª—è ${appData.weekNumber} ‚Ä¢ ${formatWeekRange(appData.weekDates)}`;
        }

        // –°–æ–∑–¥–∞–µ–º 7 –¥–Ω–µ–π –µ—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç
        if (appData.plan.length === 0) {
            appData.plan = Array(7).fill().map((_, index) => ({
                day_of_week: index,
                is_rest_day: false,
                notification_time: '19:00',
                exercises: []
            }));
        }

        appData.plan.forEach((dayData, index) => {
            const dayCard = document.createElement('div');
            dayCard.className = `day-card ${dayData.is_rest_day ? 'rest-day' : ''}`;
            
            const exerciseCountText = dayData.is_rest_day 
                ? 'üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π' 
                : `${dayData.exercises ? dayData.exercises.length : 0} —É–ø—Ä.`;

            const dateDisplay = appData.weekDates && appData.weekDates[index] 
                ? formatDate(appData.weekDates[index])
                : '';

            dayCard.innerHTML = `
                <div class="day-header">
                    <div class="day-main-info">
                        <span class="day-name">${dayNames[index]}</span>
                        <span class="exercise-count">${exerciseCountText}</span>
                    </div>
                    <div class="day-date">${dateDisplay}</div>
                </div>
                ${!dayData.is_rest_day && dayData.exercises && dayData.exercises.length > 0 ? `
                    <div class="day-exercises-preview">
                        ${dayData.exercises.slice(0, 2).map(ex => 
                            `<span class="exercise-preview">${ex.name}</span>`
                        ).join('')}
                        ${dayData.exercises.length > 2 ? '<span class="exercise-more">...</span>' : ''}
                    </div>
                ` : ''}
            `;
            
            dayCard.addEventListener('click', () => openDayModal(index));
            container.appendChild(dayCard);
        });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–Ω—è
    function openDayModal(dayIndex) {
        currentEditingDayIndex = dayIndex;
        
        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–ª–∞–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!appData.plan[dayIndex]) {
            appData.plan[dayIndex] = {
                day_of_week: dayIndex,
                is_rest_day: false,
                notification_time: '19:00',
                exercises: []
            };
        }
        
        const dayData = appData.plan[dayIndex];

        const dateDisplay = appData.weekDates && appData.weekDates[dayIndex] 
            ? formatDate(appData.weekDates[dayIndex])
            : '';
        document.getElementById('modal-day-title').textContent = 
            `${dayNames[dayIndex]} ‚Ä¢ ${dateDisplay}`;

        renderExercisesList(dayData.exercises || []);
        
        const restDayToggle = document.getElementById('rest-day-toggle');
        restDayToggle.checked = dayData.is_rest_day || false;

        openModal(document.getElementById('day-modal'));
    }

    function renderExercisesList(exercises) {
        const listContainer = document.getElementById('exercises-list');
        listContainer.innerHTML = '';
        
        if (!exercises || exercises.length === 0) {
            listContainer.innerHTML = '<p style="text-align: center; padding: 20px; color: var(--text-secondary);">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>';
            return;
        }

        exercises.forEach((ex, index) => {
            const item = document.createElement('div');
            item.className = 'exercise-item';
            item.innerHTML = `
                <div class="exercise-info">
                    <strong>${ex.name}</strong>
                    <span>${ex.sets} –ø–æ–¥—Ö–æ–¥(–∞) √ó ${ex.reps}</span>
                </div>
                <button class="delete-btn" onclick="deleteExercise(${index})">‚ùå</button>
            `;
            listContainer.appendChild(item);
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    window.deleteExercise = function(exerciseIndex) {
        if (currentEditingDayIndex === null || !appData.plan[currentEditingDayIndex].exercises) return;
        
        appData.plan[currentEditingDayIndex].exercises.splice(exerciseIndex, 1);
        renderExercisesList(appData.plan[currentEditingDayIndex].exercises);
        savePlan();
    };

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    async function savePlan() {
        try {
            console.log('Saving plan:', appData.plan);
            
            const response = await fetch(`${BACKEND_URL}/api/plan`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ plan: appData.plan })
            });
            
            const result = await response.json();
            
            if (response.ok) {
                showNotification('‚úÖ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
                renderWeekPlan();
            } else {
                showNotification(result.error || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', 'error');
            }
        } catch (error) {
            console.error('Error saving plan:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', 'error');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
    document.getElementById('rest-day-toggle').addEventListener('change', function() {
        if (currentEditingDayIndex === null) return;
        
        const isRestDay = this.checked;
        appData.plan[currentEditingDayIndex].is_rest_day = isRestDay;
        
        // –ï—Å–ª–∏ –¥–µ–Ω—å —Å—Ç–∞–ª –≤—ã—Ö–æ–¥–Ω—ã–º, –æ—á–∏—â–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        if (isRestDay) {
            appData.plan[currentEditingDayIndex].exercises = [];
            renderExercisesList([]);
        }
        
        savePlan();
    });

    document.getElementById('add-exercise-form').addEventListener('submit', (e) => {
        e.preventDefault();
        
        const name = document.getElementById('ex-name').value.trim();
        const sets = document.getElementById('ex-sets').value;
        const reps = document.getElementById('ex-reps').value.trim();

        if (!name || !sets || !reps || currentEditingDayIndex === null) {
            showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!appData.plan[currentEditingDayIndex].exercises) {
            appData.plan[currentEditingDayIndex].exercises = [];
        }

        const newExercise = { 
            name, 
            sets: parseInt(sets), 
            reps
        };
        
        appData.plan[currentEditingDayIndex].exercises.push(newExercise);
        renderExercisesList(appData.plan[currentEditingDayIndex].exercises);
        savePlan();
        
        e.target.reset();
        showNotification('‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    });

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    document.getElementById('start-workout-btn').addEventListener('click', function() {
        showNotification('üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞! –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.', 'success');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.getElementById('modal-close-btn').addEventListener('click', () => {
        closeModal(document.getElementById('day-modal'));
    });

    document.getElementById('settings-close-btn').addEventListener('click', () => {
        closeModal(document.getElementById('settings-modal'));
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal(modal);
            }
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function initApp() {
        initTheme();
        loadPlan();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        const savedTimezone = localStorage.getItem('timezone') || 'Europe/Moscow';
        document.getElementById('timezone-select').value = savedTimezone;

        if (tg.initDataUnsafe?.user) {
            document.getElementById('user-name').textContent = tg.initDataUnsafe.user.first_name;
        }
    }

    initApp();
});