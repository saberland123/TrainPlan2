const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const path = require('path');
const schedule = require('node-schedule');
const moment = require('moment-timezone');
const { Telegraf } = require('telegraf');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = 'trainplan_pro_secret_key_2024_ultimate';
const BOT_TOKEN = '8285829471:AAGehHp9CC1r6j1F7UArlcwUPG6Rex2RGMo';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let bot = null;
try {
    bot = new Telegraf(BOT_TOKEN);
    console.log('ü§ñ Telegram Bot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
}

app.use(cors());
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static('.'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const db = new sqlite3.Database('./trainplan_pro.db');

// ==================== –°–û–ó–î–ê–ù–ò–ï –í–°–ï–• –¢–ê–ë–õ–ò–¶ ====================

db.serialize(() => {
  // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    first_name TEXT,
    email TEXT,
    telegram_id INTEGER UNIQUE,
    timezone TEXT DEFAULT 'Europe/Moscow',
    theme TEXT DEFAULT 'dark',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_login DATETIME,
    is_active BOOLEAN DEFAULT 1
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ –∞–Ω–∫–µ—Ç—ã
  db.run(`CREATE TABLE IF NOT EXISTS user_health (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    age INTEGER,
    gender TEXT CHECK(gender IN ('male', 'female', 'other')),
    height INTEGER, -- –≤ —Å–º
    weight DECIMAL(5,2), -- –≤ –∫–≥
    goal TEXT CHECK(goal IN ('weight_loss', 'muscle_gain', 'maintenance', 'endurance')),
    activity_level TEXT CHECK(activity_level IN ('sedentary', 'light', 'moderate', 'active', 'very_active')),
    injuries TEXT, -- JSON —Å —Ç—Ä–∞–≤–º–∞–º–∏
    limitations TEXT, -- JSON —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    health_notes TEXT,
    daily_calorie_target INTEGER,
    protein_target INTEGER,
    carb_target INTEGER,
    fat_target INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  db.run(`CREATE TABLE IF NOT EXISTS workout_plans (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    plan_data TEXT,
    week_start_date DATE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –≥—Ä—É–ø–ø
  db.run(`CREATE TABLE IF NOT EXISTS groups (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    invite_code TEXT UNIQUE,
    creator_id INTEGER,
    plan_type TEXT DEFAULT 'week',
    is_public BOOLEAN DEFAULT 0,
    max_members INTEGER DEFAULT 50,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(creator_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø
  db.run(`CREATE TABLE IF NOT EXISTS group_members (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    group_id INTEGER,
    user_id INTEGER,
    role TEXT DEFAULT 'member',
    joined_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(group_id) REFERENCES groups(id),
    FOREIGN KEY(user_id) REFERENCES users(id),
    UNIQUE(group_id, user_id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  db.run(`CREATE TABLE IF NOT EXISTS user_stats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    total_workout_days INTEGER DEFAULT 0,
    completed_weeks INTEGER DEFAULT 0,
    current_streak INTEGER DEFAULT 0,
    longest_streak INTEGER DEFAULT 0,
    total_exercises INTEGER DEFAULT 0,
    total_weight_lifted INTEGER DEFAULT 0,
    favorite_exercise TEXT,
    last_workout_date DATE,
    total_calories_burned INTEGER DEFAULT 0,
    total_workout_minutes INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  db.run(`CREATE TABLE IF NOT EXISTS completed_workouts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    workout_date DATE DEFAULT CURRENT_DATE,
    day_of_week INTEGER,
    exercises_completed INTEGER,
    total_exercises INTEGER,
    workout_duration INTEGER,
    calories_burned INTEGER,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
  db.run(`CREATE TABLE IF NOT EXISTS exercise_library (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    category TEXT,
    subcategory TEXT,
    description TEXT,
    instructions TEXT,
    muscle_group TEXT,
    secondary_muscles TEXT,
    difficulty TEXT DEFAULT 'beginner',
    equipment TEXT DEFAULT 'bodyweight',
    image_url TEXT,
    video_url TEXT,
    gif_url TEXT,
    calories_per_minute DECIMAL(4,2),
    is_public BOOLEAN DEFAULT 1,
    created_by INTEGER,
    rating DECIMAL(3,2) DEFAULT 0,
    rating_count INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(created_by) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  db.run(`CREATE TABLE IF NOT EXISTS workout_templates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    difficulty TEXT,
    duration_weeks INTEGER DEFAULT 1,
    template_data TEXT,
    created_by INTEGER,
    is_public BOOLEAN DEFAULT 1,
    goal_type TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(created_by) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  db.run(`CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    reminder_type TEXT CHECK(reminder_type IN ('workout', 'nutrition', 'water', 'sleep')),
    day_of_week INTEGER,
    reminder_time TEXT,
    message TEXT,
    is_active BOOLEAN DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  db.run(`CREATE TABLE IF NOT EXISTS favorite_exercises (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    exercise_id INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(exercise_id) REFERENCES exercise_library(id),
    UNIQUE(user_id, exercise_id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  db.run(`CREATE TABLE IF NOT EXISTS food_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    brand TEXT,
    category TEXT,
    calories INTEGER,
    protein DECIMAL(5,2),
    carbs DECIMAL(5,2),
    fat DECIMAL(5,2),
    fiber DECIMAL(5,2),
    sugar DECIMAL(5,2),
    serving_size TEXT,
    is_public BOOLEAN DEFAULT 1,
    created_by INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(created_by) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
  db.run(`CREATE TABLE IF NOT EXISTS meals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    meal_type TEXT CHECK(meal_type IN ('breakfast', 'lunch', 'dinner', 'snack')),
    meal_date DATE DEFAULT CURRENT_DATE,
    meal_time TIME DEFAULT CURRENT_TIME,
    total_calories INTEGER DEFAULT 0,
    total_protein DECIMAL(6,2) DEFAULT 0,
    total_carbs DECIMAL(6,2) DEFAULT 0,
    total_fat DECIMAL(6,2) DEFAULT 0,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
  db.run(`CREATE TABLE IF NOT EXISTS meal_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    meal_id INTEGER,
    food_item_id INTEGER,
    quantity DECIMAL(6,2),
    calories INTEGER,
    protein DECIMAL(5,2),
    carbs DECIMAL(5,2),
    fat DECIMAL(5,2),
    FOREIGN KEY(meal_id) REFERENCES meals(id),
    FOREIGN KEY(food_item_id) REFERENCES food_items(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –≤–æ–¥—ã
  db.run(`CREATE TABLE IF NOT EXISTS water_intake (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    intake_date DATE DEFAULT CURRENT_DATE,
    amount_ml INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
  db.run(`CREATE TABLE IF NOT EXISTS challenges (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    challenge_type TEXT CHECK(challenge_type IN ('workout', 'nutrition', 'streak', 'social')),
    goal_type TEXT CHECK(goal_type IN ('reps', 'days', 'workouts', 'calories', 'distance')),
    goal_value INTEGER,
    reward_xp INTEGER,
    difficulty TEXT DEFAULT 'medium',
    start_date DATE,
    end_date DATE,
    is_active BOOLEAN DEFAULT 1,
    max_participants INTEGER,
    created_by INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(created_by) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
  db.run(`CREATE TABLE IF NOT EXISTS challenge_participants (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    challenge_id INTEGER,
    user_id INTEGER,
    current_progress INTEGER DEFAULT 0,
    completed_at DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(challenge_id) REFERENCES challenges(id),
    FOREIGN KEY(user_id) REFERENCES users(id),
    UNIQUE(challenge_id, user_id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  db.run(`CREATE TABLE IF NOT EXISTS achievements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    icon TEXT,
    achievement_type TEXT,
    requirement_value INTEGER,
    xp_reward INTEGER,
    is_secret BOOLEAN DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  db.run(`CREATE TABLE IF NOT EXISTS user_achievements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    achievement_id INTEGER,
    earned_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(achievement_id) REFERENCES achievements(id),
    UNIQUE(user_id, achievement_id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –æ–ø—ã—Ç–∞
  db.run(`CREATE TABLE IF NOT EXISTS user_levels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    level INTEGER DEFAULT 1,
    current_xp INTEGER DEFAULT 0,
    total_xp INTEGER DEFAULT 0,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  db.run(`CREATE TABLE IF NOT EXISTS progress_metrics (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    metric_date DATE DEFAULT CURRENT_DATE,
    weight DECIMAL(5,2),
    body_fat DECIMAL(4,2),
    muscle_mass DECIMAL(5,2),
    chest_cm INTEGER,
    waist_cm INTEGER,
    hips_cm INTEGER,
    arms_cm INTEGER,
    legs_cm INTEGER,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
  )`);

  console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  populateInitialData();
});

// ==================== –ù–ê–ß–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ====================

function populateInitialData() {
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  const basicExercises = [
    {
      name: "–û—Ç–∂–∏–º–∞–Ω–∏—è", category: "strength", subcategory: "upper_body",
      muscle_group: "chest", secondary_muscles: "triceps,shoulders",
      difficulty: "beginner", equipment: "bodyweight",
      description: "–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü –∏ —Ç—Ä–∏—Ü–µ–ø—Å–æ–≤",
      instructions: "1. –ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞\n2. –û–ø—É—Å—Ç–∏—Ç–µ—Å—å –¥–æ –∫–∞—Å–∞–Ω–∏—è –≥—Ä—É–¥—å—é –ø–æ–ª–∞\n3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
      calories_per_minute: 8.0
    },
    {
      name: "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", category: "strength", subcategory: "lower_body", 
      muscle_group: "legs", secondary_muscles: "glutes,core",
      difficulty: "beginner", equipment: "bodyweight",
      description: "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–æ–≥ –∏ —è–≥–æ–¥–∏—Ü",
      instructions: "1. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á\n2. –û–ø—É—Å—Ç–∏—Ç–µ—Å—å –¥–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏ –±–µ–¥–µ—Ä —Å –ø–æ–ª–æ–º\n3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
      calories_per_minute: 7.5
    },
    // ... –±–æ–ª—å—à–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  ];

  basicExercises.forEach(exercise => {
    db.run(
      `INSERT OR IGNORE INTO exercise_library (name, category, subcategory, muscle_group, secondary_muscles, difficulty, equipment, description, instructions, calories_per_minute, is_public) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1)`,
      [exercise.name, exercise.category, exercise.subcategory, exercise.muscle_group, exercise.secondary_muscles, exercise.difficulty, exercise.equipment, exercise.description, exercise.instructions, exercise.calories_per_minute]
    );
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  const basicFoods = [
    { name: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", category: "protein", calories: 165, protein: 31.0, carbs: 0.0, fat: 3.6, serving_size: "100–≥" },
    { name: "–†–∏—Å –≤–∞—Ä–µ–Ω—ã–π", category: "carbs", calories: 130, protein: 2.7, carbs: 28.0, fat: 0.3, serving_size: "100–≥" },
    { name: "–ë—Ä–æ–∫–∫–æ–ª–∏", category: "vegetables", calories: 34, protein: 2.8, carbs: 7.0, fat: 0.4, serving_size: "100–≥" },
    // ... –±–æ–ª—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  ];

  basicFoods.forEach(food => {
    db.run(
      `INSERT OR IGNORE INTO food_items (name, category, calories, protein, carbs, fat, serving_size, is_public) 
       VALUES (?, ?, ?, ?, ?, ?, ?, 1)`,
      [food.name, food.category, food.calories, food.protein, food.carbs, food.fat, food.serving_size]
    );
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const achievements = [
    { name: "–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", icon: "üéØ", type: "workout", value: 1, xp: 100 },
    { name: "–°—Ç—Ä–∏–∫ 7 –¥–Ω–µ–π", description: "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", icon: "üî•", type: "streak", value: 7, xp: 250 },
    { name: "–ú–∞—Å—Ç–µ—Ä –æ—Ç–∂–∏–º–∞–Ω–∏–π", description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 1000 –æ—Ç–∂–∏–º–∞–Ω–∏–π", icon: "üí™", type: "reps", value: 1000, xp: 500 },
    // ... –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  ];

  achievements.forEach(achievement => {
    db.run(
      `INSERT OR IGNORE INTO achievements (name, description, icon, achievement_type, requirement_value, xp_reward) 
       VALUES (?, ?, ?, ?, ?, ?)`,
      [achievement.name, achievement.description, achievement.icon, achievement.type, achievement.value, achievement.xp]
    );
  });

  console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

// ==================== MIDDLEWARE ====================

const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    next();
  });
};

// ==================== –°–ò–°–¢–ï–ú–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ====================

app.post('/api/register', async (req, res) => {
  try {
    const { username, password, firstName, email, telegramId } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    if (password.length < 6) {
      return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    db.get('SELECT id FROM users WHERE username = ?', [username], async (err, row) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }

      if (row) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }

      const hashedPassword = await bcrypt.hash(password, 10);

      db.run(
        'INSERT INTO users (username, password, first_name, email, telegram_id) VALUES (?, ?, ?, ?, ?)',
        [username, hashedPassword, firstName || username, email || null, telegramId || null],
        function(err) {
          if (err) {
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
          }

          const userId = this.lastID;

          // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          initializeNewUser(userId);

          const token = jwt.sign({ userId, username }, JWT_SECRET, { expiresIn: '30d' });

          res.json({
            success: true,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
            token,
            user: { id: userId, username, first_name: firstName || username }
          });
        }
      );
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

function initializeNewUser(userId) {
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  db.run('INSERT OR IGNORE INTO user_stats (user_id) VALUES (?)', [userId]);
  
  // –£—Ä–æ–≤–µ–Ω—å
  db.run('INSERT OR IGNORE INTO user_levels (user_id) VALUES (?)', [userId]);
  
  // –ü—É—Å—Ç–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  const emptyPlan = Array(7).fill().map((_, index) => ({
    day_of_week: index,
    is_rest_day: index === 2 || index === 4 || index === 6,
    notification_time: '19:00',
    exercises: []
  }));

  db.run(
    'INSERT INTO workout_plans (user_id, plan_data, week_start_date) VALUES (?, ?, DATE("now"))',
    [userId, JSON.stringify(emptyPlan)]
  );

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultReminders = [
    { day_of_week: 0, reminder_time: '19:00', type: 'workout', message: '–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™' },
    { day_of_week: 1, reminder_time: '19:00', type: 'workout', message: '–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üî•' },
    { day_of_week: 3, reminder_time: '19:00', type: 'workout', message: '–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Å–∏–ª—ã! üèãÔ∏è' },
    { day_of_week: 5, reminder_time: '10:00', type: 'workout', message: '–£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Ä—è–¥–∏—Ç —ç–Ω–µ—Ä–≥–∏–µ–π! üåÖ' },
    { type: 'water', message: '–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã! üíß' },
    { type: 'nutrition', message: '–í—Ä–µ–º—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ üçé' }
  ];

  defaultReminders.forEach(reminder => {
    db.run(
      'INSERT INTO reminders (user_id, reminder_type, day_of_week, reminder_time, message) VALUES (?, ?, ?, ?, ?)',
      [userId, reminder.type, reminder.day_of_week || null, reminder.reminder_time || '12:00', reminder.message]
    );
  });
}

app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    db.get(
      'SELECT * FROM users WHERE username = ? AND is_active = 1',
      [username],
      async (err, user) => {
        if (err) {
          return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
        }

        if (!user) {
          return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
          return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        db.run('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?', [user.id]);

        const token = jwt.sign({ userId: user.id, username: user.username }, JWT_SECRET, { expiresIn: '30d' });

        res.json({
          success: true,
          message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          token,
          user: {
            id: user.id,
            username: user.username,
            first_name: user.first_name,
            email: user.email,
            telegram_id: user.telegram_id
          }
        });
      }
    );
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ==================== –°–ò–°–¢–ï–ú–ê –ó–î–û–†–û–í–¨–Ø –ò –ê–ù–ö–ï–¢–´ ====================

app.get('/api/health/profile', authenticateToken, (req, res) => {
  const userId = req.user.userId;

  db.get(
    `SELECT uh.*, u.first_name, u.email 
     FROM user_health uh 
     LEFT JOIN users u ON uh.user_id = u.id 
     WHERE uh.user_id = ?`,
    [userId],
    (err, healthProfile) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è' });
      }

      if (!healthProfile) {
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –Ω–µ—Ç
        const emptyProfile = {
          user_id: userId,
          age: null,
          gender: null,
          height: null,
          weight: null,
          goal: null,
          activity_level: null,
          injuries: '[]',
          limitations: '[]',
          health_notes: '',
          daily_calorie_target: 2000,
          protein_target: 150,
          carb_target: 250,
          fat_target: 67
        };
        return res.json({ health_profile: emptyProfile });
      }

      res.json({ health_profile: healthProfile });
    }
  );
});

app.post('/api/health/profile', authenticateToken, (req, res) => {
  const userId = req.user.userId;
  const {
    age, gender, height, weight, goal, activity_level,
    injuries, limitations, health_notes
  } = req.body;

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£
  const targets = calculateNutritionTargets(age, gender, height, weight, goal, activity_level);

  db.run(
    `INSERT OR REPLACE INTO user_health 
     (user_id, age, gender, height, weight, goal, activity_level, injuries, limitations, health_notes, daily_calorie_target, protein_target, carb_target, fat_target, updated_at) 
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)`,
    [userId, age, gender, height, weight, goal, activity_level, 
     JSON.stringify(injuries || []), JSON.stringify(limitations || []), health_notes || '',
     targets.calories, targets.protein, targets.carbs, targets.fat],
    function(err) {
      if (err) {
        console.error('Error saving health profile:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è' });
      }

      res.json({ 
        success: true, 
        message: '–ü—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –æ–±–Ω–æ–≤–ª–µ–Ω',
        nutrition_targets: targets
      });
    }
  );
});

function calculateNutritionTargets(age, gender, height, weight, goal, activityLevel) {
  // –ë–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
  let bmr;
  if (gender === 'male') {
    bmr = 10 * weight + 6.25 * height - 5 * age + 5;
  } else {
    bmr = 10 * weight + 6.25 * height - 5 * age - 161;
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const activityMultipliers = {
    sedentary: 1.2,
    light: 1.375,
    moderate: 1.55,
    active: 1.725,
    very_active: 1.9
  };

  let tdee = bmr * (activityMultipliers[activityLevel] || 1.2);

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
  const goalMultipliers = {
    weight_loss: 0.8,
    maintenance: 1.0,
    muscle_gain: 1.1,
    endurance: 1.05
  };

  const calories = Math.round(tdee * (goalMultipliers[goal] || 1.0));

  // –†–∞—Å—á–µ—Ç –ë–ñ–£
  const protein = goal === 'muscle_gain' ? Math.round(weight * 2.2) : Math.round(weight * 1.8);
  const fat = Math.round((calories * 0.25) / 9); // 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
  const carbs = Math.round((calories - (protein * 4) - (fat * 9)) / 4);

  return {
    calories,
    protein,
    carbs,
    fat
  };
}

// ==================== –°–ò–°–¢–ï–ú–ê –ü–ò–¢–ê–ù–ò–Ø ====================

app.get('/api/nutrition/foods', authenticateToken, (req, res) => {
  const { search, category } = req.query;
  
  let query = `SELECT * FROM food_items WHERE is_public = 1`;
  const params = [];

  if (search) {
    query += ` AND name LIKE ?`;
    params.push(`%${search}%`);
  }
  
  if (category) {
    query += ` AND category = ?`;
    params.push(category);
  }

  query += ` ORDER BY name LIMIT 100`;

  db.all(query, params, (err, foods) => {
    if (err) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤' });
    }
    res.json({ foods: foods || [] });
  });
});

app.post('/api/nutrition/foods', authenticateToken, (req, res) => {
  const { name, brand, category, calories, protein, carbs, fat, fiber, sugar, serving_size } = req.body;
  const userId = req.user.userId;

  db.run(
    `INSERT INTO food_items (name, brand, category, calories, protein, carbs, fat, fiber, sugar, serving_size, created_by) 
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
    [name, brand, category, calories, protein, carbs, fat, fiber, sugar, serving_size, userId],
    function(err) {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞' });
      }
      res.json({ success: true, food_id: this.lastID });
    }
  );
});

app.get('/api/nutrition/meals', authenticateToken, (req, res) => {
  const userId = req.user.userId;
  const { date } = req.query;
  const targetDate = date || new Date().toISOString().split('T')[0];

  db.all(
    `SELECT m.*, 
            (SELECT COUNT(*) FROM meal_items mi WHERE mi.meal_id = m.id) as item_count
     FROM meals m 
     WHERE m.user_id = ? AND m.meal_date = ? 
     ORDER BY m.meal_time`,
    [userId, targetDate],
    (err, meals) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏' });
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      const mealsWithItems = [];
      let processed = 0;

      if (meals.length === 0) {
        return res.json({ meals: [] });
      }

      meals.forEach(meal => {
        db.all(
          `SELECT mi.*, fi.name, fi.brand, fi.serving_size
           FROM meal_items mi
           LEFT JOIN food_items fi ON mi.food_item_id = fi.id
           WHERE mi.meal_id = ?`,
          [meal.id],
          (err, items) => {
            meal.items = items || [];
            mealsWithItems.push(meal);
            processed++;

            if (processed === meals.length) {
              res.json({ meals: mealsWithItems });
            }
          }
        );
      });
    }
  );
});

app.post('/api/nutrition/meals', authenticateToken, (req, res) => {
  const userId = req.user.userId;
  const { meal_type, meal_date, meal_time, items, notes } = req.body;

  db.run(
    `INSERT INTO meals (user_id, meal_type, meal_date, meal_time, notes) 
     VALUES (?, ?, ?, ?, ?)`,
    [userId, meal_type, meal_date, meal_time, notes || ''],
    function(err) {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏' });
      }

      const mealId = this.lastID;
      let totalCalories = 0, totalProtein = 0, totalCarbs = 0, totalFat = 0;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –ø—Ä–∏–µ–º –ø–∏—â–∏
      if (items && items.length > 0) {
        let itemsProcessed = 0;
        
        items.forEach(item => {
          db.run(
            `INSERT INTO meal_items (meal_id, food_item_id, quantity, calories, protein, carbs, fat) 
             VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [mealId, item.food_item_id, item.quantity, item.calories, item.protein, item.carbs, item.fat],
            function(err) {
              if (err) {
                console.error('Error adding meal item:', err);
              }

              totalCalories += item.calories;
              totalProtein += item.protein;
              totalCarbs += item.carbs;
              totalFat += item.fat;
              itemsProcessed++;

              // –ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
              if (itemsProcessed === items.length) {
                db.run(
                  `UPDATE meals SET total_calories = ?, total_protein = ?, total_carbs = ?, total_fat = ? WHERE id = ?`,
                  [totalCalories, totalProtein, totalCarbs, totalFat, mealId]
                );

                res.json({ success: true, meal_id: mealId, totals: { calories: totalCalories, protein: totalProtein, carbs: totalCarbs, fat: totalFat } });
              }
            }
          );
        });
      } else {
        res.json({ success: true, meal_id: mealId, totals: { calories: 0, protein: 0, carbs: 0, fat: 0 } });
      }
    }
  );
});

// ==================== –°–ò–°–¢–ï–ú–ê –í–û–î–´ ====================

app.post('/api/nutrition/water', authenticateToken, (req, res) => {
  const userId = req.user.userId;
  const { amount_ml, intake_date } = req.body;
  const targetDate = intake_date || new Date().toISOString().split('T')[0];

  db.run(
    `INSERT INTO water_intake (user_id, intake_date, amount_ml) VALUES (?, ?, ?)`,
    [userId, targetDate, amount_ml],
    function(err) {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–µ' });
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –¥–µ–Ω—å
      db.get(
        `SELECT SUM(amount_ml) as total_ml FROM water_intake WHERE user_id = ? AND intake_date = ?`,
        [userId, targetDate],
        (err, result) => {
          res.json({ 
            success: true, 
            total_ml: result.total_ml || 0,
            recommended_ml: 2000 // –ú–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          });
        }
      );
    }
  );
});

app.get('/api/nutrition/water', authenticateToken, (req, res) => {
  const userId = req.user.userId;
  const { date } = req.query;
  const targetDate = date || new Date().toISOString().split('T')[0];

  db.get(
    `SELECT SUM(amount_ml) as total_ml FROM water_intake WHERE user_id = ? AND intake_date = ?`,
    [userId, targetDate],
    (err, result) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–µ' });
      }
      res.json({ total_ml: result.total_ml || 0, recommended_ml: 2000 });
    }
  );
});

// ==================== –°–ò–°–¢–ï–ú–ê –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô –ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ====================

app.get('/api/challenges/active', authenticateToken, (req, res) => {
  const userId = req.user.userId;

  db.all(
    `SELECT c.*, 
            cp.current_progress,
            cp.completed_at,
            (SELECT COUNT(*) FROM challenge_participants cp2 WHERE cp2.challenge_id = c.id) as participant_count
     FROM challenges c
     LEFT JOIN challenge_participants cp ON c.id = cp.challenge_id AND cp.user_id = ?
     WHERE c.is_active = 1 AND (c.end_date IS NULL OR c.end_date >= DATE('now'))
     ORDER BY c.created_at DESC`,
    [userId],
    (err, challenges) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π' });
      }
      res.json({ challenges: challenges || [] });
    }
  );
});

app.post('/api/challenges/join', authenticateToken, (req, res) => {
  const userId = req.user.userId;
  const { challenge_id } = req.body;

  db.run(
    `INSERT INTO challenge_participants (challenge_id, user_id) VALUES (?, ?)`,
    [challenge_id, userId],
    function(err) {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É' });
      }
      res.json({ success: true, message: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É' });
    }
  );
});

app.get('/api/achievements', authenticateToken, (req, res) => {
  const userId = req.user.userId;

  db.all(
    `SELECT a.*, 
            ua.earned_at IS NOT NULL as earned,
            ua.earned_at
     FROM achievements a
     LEFT JOIN user_achievements ua ON a.id = ua.achievement_id AND ua.user_id = ?
     ORDER BY a.achievement_type, a.requirement_value`,
    [userId],
    (err, achievements) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π' });
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementsWithProgress = [];
      let processed = 0;

      achievements.forEach(achievement => {
        getAchievementProgress(userId, achievement, (progress) => {
          achievement.progress = progress;
          achievementsWithProgress.push(achievement);
          processed++;

          if (processed === achievements.length) {
            res.json({ achievements: achievementsWithProgress });
          }
        });
      });
    }
  );
});

function getAchievementProgress(userId, achievement, callback) {
  switch (achievement.achievement_type) {
    case 'workout':
      db.get(
        'SELECT COUNT(*) as count FROM completed_workouts WHERE user_id = ?',
        [userId],
        (err, result) => {
          callback({
            current: result.count,
            target: achievement.requirement_value,
            percentage: Math.min(100, (result.count / achievement.requirement_value) * 100)
          });
        }
      );
      break;
    case 'streak':
      db.get(
        'SELECT current_streak FROM user_stats WHERE user_id = ?',
        [userId],
        (err, result) => {
          callback({
            current: result.current_streak,
            target: achievement.requirement_value,
            percentage: Math.min(100, (result.current_streak / achievement.requirement_value) * 100)
          });
        }
      );
      break;
    // ... –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    default:
      callback({ current: 0, target: 1, percentage: 0 });
  }
}

// ==================== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================

app.get('/api/analytics/progress', authenticateToken, (req, res) => {
  const userId = req.user.userId;
  const { period } = req.query; // week, month, year

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  db.all(
    `SELECT workout_date, exercises_completed, workout_duration, calories_burned
     FROM completed_workouts 
     WHERE user_id = ? AND workout_date >= DATE('now', '-30 days')
     ORDER BY workout_date`,
    [userId],
    (err, workoutData) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫' });
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
      db.all(
        `SELECT meal_date, SUM(total_calories) as total_calories, 
                SUM(total_protein) as total_protein, 
                SUM(total_carbs) as total_carbs, 
                SUM(total_fat) as total_fat
         FROM meals 
         WHERE user_id = ? AND meal_date >= DATE('now', '-30 days')
         GROUP BY meal_date
         ORDER BY meal_date`,
        [userId],
        (err, nutritionData) => {
          if (err) {
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–∞–Ω–∏—è' });
          }

          // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          db.all(
            `SELECT metric_date, weight, body_fat, muscle_mass
             FROM progress_metrics 
             WHERE user_id = ? AND metric_date >= DATE('now', '-90 days')
             ORDER BY metric_date`,
            [userId],
            (err, progressData) => {
              if (err) {
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞' });
              }

              res.json({
                workout_data: workoutData,
                nutrition_data: nutritionData,
                progress_data: progressData,
                summary: calculateAnalyticsSummary(workoutData, nutritionData, progressData)
              });
            }
          );
        }
      );
    }
  );
});

function calculateAnalyticsSummary(workoutData, nutritionData, progressData) {
  const summary = {
    total_workouts: workoutData.length,
    total_calories_burned: workoutData.reduce((sum, w) => sum + (w.calories_burned || 0), 0),
    avg_workout_duration: workoutData.length > 0 ? workoutData.reduce((sum, w) => sum + (w.workout_duration || 0), 0) / workoutData.length : 0,
    // ... –¥—Ä—É–≥–∏–µ —Ä–∞—Å—á–µ—Ç—ã
  };
  return summary;
}

// ==================== –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –£–ü–†–ê–ñ–ù–ï–ù–ò–ô ====================

app.get('/api/exercises/library', authenticateToken, (req, res) => {
  const { category, difficulty, equipment, search } = req.query;
  
  let query = `SELECT * FROM exercise_library WHERE is_public = 1`;
  const params = [];

  if (category) {
    query += ` AND category = ?`;
    params.push(category);
  }
  
  if (difficulty) {
    query += ` AND difficulty = ?`;
    params.push(difficulty);
  }
  
  if (equipment) {
    query += ` AND equipment = ?`;
    params.push(equipment);
  }

  if (search) {
    query += ` AND (name LIKE ? OR description LIKE ? OR muscle_group LIKE ?)`;
    const searchTerm = `%${search}%`;
    params.push(searchTerm, searchTerm, searchTerm);
  }

  query += ` ORDER BY name ASC LIMIT 100`;

  db.all(query, params, (err, exercises) => {
    if (err) {
      console.error('Error loading exercise library:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π' });
    }
    res.json({ exercises: exercises || [] });
  });
});

app.get('/api/exercises/categories', authenticateToken, (req, res) => {
  db.all(
    `SELECT DISTINCT category FROM exercise_library WHERE is_public = 1 ORDER BY category`,
    (err, categories) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
      }
      res.json({ categories: categories.map(c => c.category) });
    }
  );
});

// ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò (–ø–ª–∞–Ω—ã, –≥—Ä—É–ø–ø—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) ====================

// [–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤, –≥—Ä—É–ø–ø, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...]
// –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–≤–ª—è—é –∑–∞–≥–ª—É—à–∫–∏, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã

app.get('/api/plan', authenticateToken, (req, res) => {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
});

app.post('/api/plan', authenticateToken, (req, res) => {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
});

app.get('/api/groups/user/:userId', authenticateToken, (req, res) => {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
});

// ... –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints

// ==================== TELEGRAM BOT –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ====================

if (bot) {
  bot.start((ctx) => {
    ctx.reply(`üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrainPlan Pro! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
üí™ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
üçé –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üë• –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –∞–∫–∫–∞—É–Ω—Ç!`);
  });

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  bot.launch().then(() => {
    console.log('‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω');
  }).catch(err => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err.message);
  });

  // –í–∫–ª—é—á–∏–º graceful stop
  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

// ==================== –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ====================

function startReminderSystem() {
  // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  schedule.scheduleJob('0 8 * * *', () => {
    const today = new Date();
    const dayOfWeek = today.getDay(); // 0-6, –≥–¥–µ 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    db.all(
      `SELECT r.*, u.telegram_id, u.first_name 
       FROM reminders r
       JOIN users u ON r.user_id = u.id
       WHERE r.is_active = 1 AND (r.day_of_week IS NULL OR r.day_of_week = ?)`,
      [dayOfWeek],
      (err, reminders) => {
        if (err) {
          console.error('Error loading reminders:', err);
          return;
        }

        reminders.forEach(reminder => {
          if (bot && reminder.telegram_id) {
            bot.telegram.sendMessage(reminder.telegram_id, reminder.message)
              .catch(err => console.log('Error sending reminder:', err.message));
          }
        });
      }
    );
  });

  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞');
}

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ SPA —Ä–æ—É—Ç–∏–Ω–≥
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.listen(PORT, () => {
  console.log(`üöÄ TrainPlan Pro –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
  console.log(`üîê –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞`);
  console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: trainplan_pro.db`);
  console.log(`ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${bot ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï –ê–ö–¢–ò–í–ï–ù'}`);
  
  startReminderSystem();
});