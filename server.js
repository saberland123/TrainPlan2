const express = require('express');
const cors = require('cors');
const { Telegraf } = require('telegraf');
const crypto = require('crypto');
const schedule = require('node-schedule');
const path = require('path');

// --- –ù–ê–°–¢–†–û–ô–ö–ò ---
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = '8285829471:AAGehHp9CC1r6j1F7UArlcwUPG6Rex2RGMo';

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
const bot = new Telegraf(BOT_TOKEN);
const jobs = {};
const userSettings = {};

// --- MIDDLEWARE ---
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// --- –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ---
const simpleAuth = (req, res, next) => {
    req.user = {
        id: 123456789,
        first_name: 'Test',
        last_name: 'User',
        username: 'testuser'
    };
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    next();
};

// --- –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendExerciseNotification(userId, exercise, dayName, interval) {
    try {
        const message = `üèãÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${dayName}**\n\n` +
                       `**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:** ${exercise.name}\n` +
                       `**–ü–æ–¥—Ö–æ–¥—ã:** ${exercise.sets}\n` +
                       `**–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:** ${exercise.reps}\n\n` +
                       `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ ${interval} –º–∏–Ω—É—Ç`;

        await bot.telegram.sendMessage(userId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[
                    { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', callback_data: `complete_${exercise.name}` }
                ]]
            }
        });
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏–ª"
bot.on('callback_query', async (ctx) => {
    const callbackData = ctx.callbackQuery.data;
    
    if (callbackData.startsWith('complete_')) {
        const exerciseName = callbackData.replace('complete_', '');
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(
            `‚úÖ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n` +
            `**${exerciseName}** - –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏! üí™\n\n` +
            `–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.`,
            { parse_mode: 'Markdown' }
        );
        
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–≤–µ—Ä—à–∏–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${exerciseName}`);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function scheduleNotifications(userId, plan) {
    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    if (jobs[userId]) {
        jobs[userId].forEach(job => job.cancel());
        delete jobs[userId];
    }
    
    jobs[userId] = [];
    
    plan.forEach((day, dayIndex) => {
        if (day.isRestDay || !day.exercises.length || !day.notificationTime) return;
        
        const [hours, minutes] = day.notificationTime.split(':');
        const dayNames = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"];
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        day.exercises.forEach((exercise, exerciseIndex) => {
            const rule = new schedule.RecurrenceRule();
            rule.dayOfWeek = dayIndex;
            rule.hour = parseInt(hours, 10);
            rule.minute = parseInt(minutes, 10) + (exerciseIndex * (day.notificationInterval || 10));
            rule.tz = 'Europe/Moscow';
            
            const job = schedule.scheduleJob(rule, () => {
                sendExerciseNotification(
                    userId, 
                    exercise, 
                    dayNames[dayIndex],
                    day.notificationInterval || 10
                );
            });
            
            jobs[userId].push(job);
        });
    });
    
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
}

// --- API –≠–ù–î–ü–û–ò–ù–¢–´ ---

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
app.get('/api/plan', simpleAuth, async (req, res) => {
    try {
        const userId = req.user.id;
        
        const testPlan = [
            { 
                day_of_week: 0, 
                day: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 
                exercises: [
                    { name: "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", sets: 3, reps: 10 },
                    { name: "–û—Ç–∂–∏–º–∞–Ω–∏—è", sets: 4, reps: 15 }
                ], 
                isRestDay: false,
                notificationTime: "19:00",
                notificationInterval: 10
            },
            { 
                day_of_week: 1, 
                day: "–í—Ç–æ—Ä–Ω–∏–∫", 
                exercises: [
                    { name: "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", sets: 3, reps: 8 }
                ], 
                isRestDay: false,
                notificationTime: "19:00",
                notificationInterval: 10
            },
            { 
                day_of_week: 2, 
                day: "–°—Ä–µ–¥–∞", 
                exercises: [], 
                isRestDay: false,
                notificationTime: "19:00",
                notificationInterval: 10
            },
            { 
                day_of_week: 3, 
                day: "–ß–µ—Ç–≤–µ—Ä–≥", 
                exercises: [
                    { name: "–ü–ª–∞–Ω–∫–∞", sets: 3, reps: "60 —Å–µ–∫" }
                ], 
                isRestDay: false,
                notificationTime: "19:00",
                notificationInterval: 10
            },
            { 
                day_of_week: 4, 
                day: "–ü—è—Ç–Ω–∏—Ü–∞", 
                exercises: [], 
                isRestDay: false,
                notificationTime: "19:00",
                notificationInterval: 10
            },
            { 
                day_of_week: 5, 
                day: "–°—É–±–±–æ—Ç–∞", 
                exercises: [], 
                isRestDay: true 
            },
            { 
                day_of_week: 6, 
                day: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", 
                exercises: [], 
                isRestDay: true 
            }
        ];
        
        res.json(testPlan);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞:', e);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
app.post('/api/plan', simpleAuth, async (req, res) => {
    try {
        const userId = req.user.id;
        const plan = req.body.plan;
        
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        scheduleNotifications(userId, plan);
        
        res.json({ 
            status: 'success', 
            message: '–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.',
            receivedAt: new Date().toISOString()
        });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞:', e);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
app.get('/api/settings', simpleAuth, (req, res) => {
    const userId = req.user.id;
    const settings = userSettings[userId] || {
        notificationsEnabled: true,
        soundEnabled: true,
        language: 'ru',
        timezone: 'Europe/Moscow'
    };
    
    res.json(settings);
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
app.post('/api/settings', simpleAuth, (req, res) => {
    const userId = req.user.id;
    userSettings[userId] = req.body.settings;
    
    res.json({ 
        status: 'success', 
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!' 
    });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/test', (req, res) => {
    res.json({ 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        time: new Date().toISOString()
    });
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
async function start() {
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.launch();
        console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, () => {
            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üåê –õ–æ–∫–∞–ª—å–Ω—ã–π URL: http://localhost:${PORT}`);
            console.log(`üîß –†–µ–∂–∏–º: –†–ê–ó–†–ê–ë–û–¢–ö–ê`);
            console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
            console.log('   GET  /              - Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
            console.log('   GET  /api/plan      - –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
            console.log('   POST /api/plan      - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω');
            console.log('   GET  /api/settings  - –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            console.log('   POST /api/settings  - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
}

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    Object.values(jobs).flat().forEach(job => job.cancel());
    bot.stop();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    Object.values(jobs).flat().forEach(job => job.cancel());
    bot.stop();
    process.exit(0);
});

start();