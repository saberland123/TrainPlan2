// server.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø RENDER
const express = require('express');
const { Telegraf, Markup } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const schedule = require('node-schedule');

const app = express();
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN || '8285829471:AAGehHp9CC1r6j1F7UArlcwUPG6Rex2RGMo';

const bot = new Telegraf(BOT_TOKEN);
const jobs = {};

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ü—Ä–æ—Å—Ç–æ–π CORS middleware
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(':memory:', (err) => {
    if (err) {
        console.error('Error opening database:', err);
    } else {
        console.log('‚úÖ Connected to SQLite database');
        initDatabase();
    }
});

function initDatabase() {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        first_name TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    db.run(`CREATE TABLE IF NOT EXISTS training_plans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        day_of_week INTEGER,
        is_rest_day BOOLEAN DEFAULT 0,
        notification_time TEXT DEFAULT '19:00',
        notification_interval INTEGER DEFAULT 10,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    db.run(`CREATE TABLE IF NOT EXISTS exercises (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        plan_id INTEGER,
        name TEXT,
        sets INTEGER,
        reps TEXT,
        rest_between_sets INTEGER DEFAULT 60,
        rest_after_exercise INTEGER DEFAULT 60,
        order_index INTEGER,
        FOREIGN KEY(plan_id) REFERENCES training_plans(id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    db.run(`CREATE TABLE IF NOT EXISTS completed_workouts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        exercise_name TEXT,
        completed_date DATE,
        completed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    db.run(`CREATE TABLE IF NOT EXISTS current_week (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        week_start DATE,
        week_number INTEGER,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
function getCurrentWeekDates() {
    const now = new Date();
    const currentDay = now.getDay();
    const startOfWeek = new Date(now);
    
    const diff = currentDay === 0 ? -6 : 1 - currentDay;
    startOfWeek.setDate(now.getDate() + diff);
    startOfWeek.setHours(0, 0, 0, 0);

    const weekDates = [];
    for (let i = 0; i < 7; i++) {
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + i);
        weekDates.push(date);
    }

    return weekDates;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
function getWeekNumber(date) {
    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
function updateCurrentWeek() {
    const weekDates = getCurrentWeekDates();
    const weekStart = weekDates[0];
    const weekNumber = getWeekNumber(weekStart);

    db.run(`INSERT OR REPLACE INTO current_week (id, week_start, week_number) VALUES (1, ?, ?)`, 
        [weekStart.toISOString().split('T')[0], weekNumber], 
        (err) => {
            if (err) console.error('Error updating week:', err);
            else console.log(`üìÖ Week updated: ${weekStart.toDateString()} (Week ${weekNumber})`);
        }
    );

    return { weekDates, weekNumber };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(telegramId, username, firstName) {
    return new Promise((resolve, reject) => {
        db.run(`INSERT OR IGNORE INTO users (telegram_id, username, first_name) VALUES (?, ?, ?)`,
            [telegramId, username, firstName],
            function(err) {
                if (err) reject(err);
                else resolve(this.lastID);
            }
        );
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
function createDefaultPlan(userId) {
    const defaultExercises = [
        { day: 0, exercises: [
            { name: "–û—Ç–∂–∏–º–∞–Ω–∏—è", sets: 5, reps: "5", rest_between_sets: 60, rest_after_exercise: 60 },
            { name: "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π", sets: 3, reps: "10-12", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        { day: 1, exercises: [
            { name: "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", sets: 4, reps: "10-12", rest_between_sets: 90, rest_after_exercise: 60 },
            { name: "–í—ã–ø–∞–¥—ã", sets: 3, reps: "10 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        { day: 2, exercises: [
            { name: "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", sets: 4, reps: "6-8", rest_between_sets: 60, rest_after_exercise: 60 },
            { name: "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏", sets: 3, reps: "10-12", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        { day: 3, exercises: [
            { name: "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è", sets: 4, reps: "10-12", rest_between_sets: 60, rest_after_exercise: 60 },
            { name: "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏", sets: 3, reps: "12-15", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        { day: 4, exercises: [
            { name: "–ü—Ä–µ—Å—Å —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", sets: 3, reps: "15-20", rest_between_sets: 45, rest_after_exercise: 45 },
            { name: "–ü–ª–∞–Ω–∫–∞", sets: 3, reps: "60 —Å–µ–∫—É–Ω–¥", rest_between_sets: 45, rest_after_exercise: 45 }
        ], isRestDay: false },
        { day: 5, exercises: [], isRestDay: true },
        { day: 6, exercises: [], isRestDay: true }
    ];

    defaultExercises.forEach(dayPlan => {
        db.run(`INSERT INTO training_plans (user_id, day_of_week, is_rest_day, notification_time, notification_interval) 
                VALUES (?, ?, ?, ?, ?)`,
            [userId, dayPlan.day, dayPlan.isRestDay || false, '19:00', 10],
            function(err) {
                if (err) return console.error(err);
                
                const planId = this.lastID;
                dayPlan.exercises.forEach((exercise, index) => {
                    db.run(`INSERT INTO exercises (plan_id, name, sets, reps, rest_between_sets, rest_after_exercise, order_index) 
                            VALUES (?, ?, ?, ?, ?, ?, ?)`,
                        [planId, exercise.name, exercise.sets, exercise.reps, exercise.rest_between_sets, exercise.rest_after_exercise, index]);
                });
            }
        );
    });
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start(async (ctx) => {
    const user = ctx.from;
    await registerUser(user.id, user.username, user.first_name);
    
    await ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!\n\n` +
        `–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä! üèãÔ∏è\n\n` +
        `–û—Ç–∫—Ä–æ–π Web App —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:`,
        Markup.keyboard([
            [Markup.button.webApp('üìÖ –û—Ç–∫—Ä—ã—Ç—å TrainPlan', `https://${process.env.RENDER_EXTERNAL_URL || 'localhost:3000'}`)]
        ]).resize()
    );
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç Web App
app.post('/webhook', express.json(), (req, res) => {
    const { userId, message } = req.body;
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App
    res.json({ status: 'received' });
});

// API Endpoints
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/api/plan', (req, res) => {
    const { weekDates, weekNumber } = updateCurrentWeek();
    
    db.all(`SELECT * FROM training_plans ORDER BY day_of_week`, [], (err, plans) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ error: 'Database error' });
        }

        const planPromises = plans.map(plan => {
            return new Promise((resolve, reject) => {
                db.all(`SELECT * FROM exercises WHERE plan_id = ? ORDER BY order_index`, [plan.id], (err, exercises) => {
                    if (err) reject(err);
                    else resolve({
                        ...plan,
                        exercises: exercises
                    });
                });
            });
        });

        Promise.all(planPromises)
            .then(fullPlan => res.json({ 
                plan: fullPlan, 
                weekDates: weekDates.map(date => date.toISOString()),
                weekNumber,
                currentDate: new Date().toISOString()
            }))
            .catch(error => {
                console.error(error);
                res.status(500).json({ error: 'Database error' });
            });
    });
});

app.post('/api/plan', (req, res) => {
    const plan = req.body.plan;

    db.run(`DELETE FROM exercises WHERE plan_id IN (SELECT id FROM training_plans)`, []);
    db.run(`DELETE FROM training_plans`, [], (err) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ error: 'Database error' });
        }

        plan.forEach((dayPlan, dayIndex) => {
            db.run(`INSERT INTO training_plans (user_id, day_of_week, is_rest_day, notification_time, notification_interval) 
                    VALUES (?, ?, ?, ?, ?)`,
                [1, dayIndex, dayPlan.isRestDay || false, dayPlan.notificationTime || '19:00', dayPlan.notificationInterval || 10],
                function(err) {
                    if (err) return console.error(err);

                    const planId = this.lastID;
                    dayPlan.exercises.forEach((exercise, exerciseIndex) => {
                        db.run(`INSERT INTO exercises (plan_id, name, sets, reps, rest_between_sets, rest_after_exercise, order_index) 
                                VALUES (?, ?, ?, ?, ?, ?, ?)`,
                            [planId, exercise.name, exercise.sets, exercise.reps, 
                             exercise.rest_between_sets || 60, exercise.rest_after_exercise || 60, exerciseIndex]);
                    });
                }
            );
        });

        res.json({ status: 'success', message: '–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!' });
    });
});

app.post('/api/load-default-plan', (req, res) => {
    db.run(`DELETE FROM exercises WHERE plan_id IN (SELECT id FROM training_plans)`, []);
    db.run(`DELETE FROM training_plans`, [], (err) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ error: 'Database error' });
        }

        createDefaultPlan(1);
        res.json({ status: 'success', message: '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω!' });
    });
});

app.get('/api/stats', (req, res) => {
    db.all(`SELECT DISTINCT completed_date FROM completed_workouts 
            WHERE completed_date >= date('now', '-7 days')`, [], (err, completedDays) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ error: 'Database error' });
        }

        db.get(`SELECT COUNT(*) as total FROM completed_workouts`, [], (err, totalResult) => {
            if (err) {
                console.error(err);
                return res.status(500).json({ error: 'Database error' });
            }

            res.json({
                completedThisWeek: completedDays.length,
                totalCompleted: totalResult.total,
                today: new Date().toISOString().split('T')[0]
            });
        });
    });
});

// Health check
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: 'Server is running',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development',
        url: process.env.RENDER_EXTERNAL_URL || 'localhost:3000'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log('='.repeat(60));
    console.log('üöÄ TrainPlan Server Started!');
    console.log(`üìç Port: ${PORT}`);
    console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üîó URL: ${process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`}`);
    console.log('='.repeat(60));
    
    updateCurrentWeek();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ production –∏–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (process.env.ENABLE_BOT === 'true') {
        startBot();
    } else {
        console.log('ü§ñ Bot polling is disabled. Use webhooks instead.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
async function startBot() {
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏
        await bot.telegram.deleteWebhook({ drop_pending_updates: true });
        console.log('‚úÖ Webhook deleted');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.launch();
        console.log('ü§ñ Telegram bot started with polling');
    } catch (error) {
        console.error('‚ùå Failed to start bot:', error.message);
        // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
    }
}

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë Stopping server...');
    bot.stop();
    db.close();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Stopping server...');
    bot.stop();
    db.close();
    process.exit(0);
});