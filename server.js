// server.js - –° PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò –û–¢ –ë–û–¢–ê
const express = require('express');
const cors = require('cors');
const { Telegraf, Markup } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const schedule = require('node-schedule');

const app = express();
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN || '8285829471:AAGehHp9CC1r6j1F7UArlcwUPG6Rex2RGMo';

const bot = new Telegraf(BOT_TOKEN);
const jobs = {};

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(':memory:', (err) => {
    if (err) {
        console.error('Error opening database:', err);
    } else {
        console.log('‚úÖ Connected to SQLite database');
        initDatabase();
    }
});

function initDatabase() {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        first_name TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    db.run(`CREATE TABLE IF NOT EXISTS training_plans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        day_of_week INTEGER,
        is_rest_day BOOLEAN DEFAULT 0,
        notification_time TEXT DEFAULT '19:00',
        notification_interval INTEGER DEFAULT 10,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    db.run(`CREATE TABLE IF NOT EXISTS exercises (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        plan_id INTEGER,
        name TEXT,
        sets INTEGER,
        reps TEXT,
        rest_between_sets INTEGER DEFAULT 60,
        rest_after_exercise INTEGER DEFAULT 60,
        order_index INTEGER,
        FOREIGN KEY(plan_id) REFERENCES training_plans(id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    db.run(`CREATE TABLE IF NOT EXISTS completed_workouts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        exercise_name TEXT,
        completed_date DATE,
        completed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    db.run(`CREATE TABLE IF NOT EXISTS current_week (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        week_start DATE,
        week_number INTEGER,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    db.run(`CREATE TABLE IF NOT EXISTS workout_sessions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        day_of_week INTEGER,
        current_exercise_index INTEGER DEFAULT 0,
        exercises_data TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
function getCurrentWeekDates() {
    const now = new Date();
    const currentDay = now.getDay();
    const startOfWeek = new Date(now);
    
    const diff = currentDay === 0 ? -6 : 1 - currentDay;
    startOfWeek.setDate(now.getDate() + diff);
    startOfWeek.setHours(0, 0, 0, 0);

    const weekDates = [];
    for (let i = 0; i < 7; i++) {
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + i);
        weekDates.push(date);
    }

    return weekDates;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
function getWeekNumber(date) {
    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
function updateCurrentWeek() {
    const weekDates = getCurrentWeekDates();
    const weekStart = weekDates[0];
    const weekNumber = getWeekNumber(weekStart);

    db.run(`INSERT OR REPLACE INTO current_week (id, week_start, week_number) VALUES (1, ?, ?)`, 
        [weekStart.toISOString().split('T')[0], weekNumber], 
        (err) => {
            if (err) console.error('Error updating week:', err);
            else console.log(`üìÖ Week updated: ${weekStart.toDateString()} (Week ${weekNumber})`);
        }
    );

    return { weekDates, weekNumber };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(telegramId, username, firstName) {
    return new Promise((resolve, reject) => {
        db.run(`INSERT OR IGNORE INTO users (telegram_id, username, first_name) VALUES (?, ?, ?)`,
            [telegramId, username, firstName],
            function(err) {
                if (err) reject(err);
                else resolve(this.lastID);
            }
        );
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
function createDefaultPlan(userId) {
    const defaultExercises = [
        // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ì—Ä—É–¥—å/–¢—Ä–∏—Ü–µ–ø—Å
        { day: 0, exercises: [
            { name: "–û—Ç–∂–∏–º–∞–Ω–∏—è", sets: 5, reps: "5", rest_between_sets: 60, rest_after_exercise: 60 },
            { name: "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π", sets: 3, reps: "10-12", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        // –í—Ç–æ—Ä–Ω–∏–∫ - –ù–æ–≥–∏
        { day: 1, exercises: [
            { name: "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", sets: 4, reps: "10-12", rest_between_sets: 90, rest_after_exercise: 60 },
            { name: "–í—ã–ø–∞–¥—ã", sets: 3, reps: "10 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        // –°—Ä–µ–¥–∞ - –°–ø–∏–Ω–∞/–ë–∏—Ü–µ–ø—Å
        { day: 2, exercises: [
            { name: "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", sets: 4, reps: "6-8", rest_between_sets: 60, rest_after_exercise: 60 },
            { name: "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏", sets: 3, reps: "10-12", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        // –ß–µ—Ç–≤–µ—Ä–≥ - –ü–ª–µ—á–∏
        { day: 3, exercises: [
            { name: "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è", sets: 4, reps: "10-12", rest_between_sets: 60, rest_after_exercise: 60 },
            { name: "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏", sets: 3, reps: "12-15", rest_between_sets: 60, rest_after_exercise: 60 }
        ], isRestDay: false },
        // –ü—è—Ç–Ω–∏—Ü–∞ - –ü—Ä–µ—Å—Å/–ö–∞—Ä–¥–∏–æ
        { day: 4, exercises: [
            { name: "–ü—Ä–µ—Å—Å —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", sets: 3, reps: "15-20", rest_between_sets: 45, rest_after_exercise: 45 },
            { name: "–ü–ª–∞–Ω–∫–∞", sets: 3, reps: "60 —Å–µ–∫—É–Ω–¥", rest_between_sets: 45, rest_after_exercise: 45 },
            { name: "–ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ–º –Ω–æ–≥", sets: 3, reps: "5 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É", rest_between_sets: 45, rest_after_exercise: 60 }
        ], isRestDay: false },
        // –°—É–±–±–æ—Ç–∞ - –û—Ç–¥—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å)
        { day: 5, exercises: [], isRestDay: true },
        // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –û—Ç–¥—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å)
        { day: 6, exercises: [], isRestDay: true }
    ];

    defaultExercises.forEach(dayPlan => {
        db.run(`INSERT INTO training_plans (user_id, day_of_week, is_rest_day, notification_time, notification_interval) 
                VALUES (?, ?, ?, ?, ?)`,
            [userId, dayPlan.day, dayPlan.isRestDay || false, '19:00', 10],
            function(err) {
                if (err) return console.error(err);
                
                const planId = this.lastID;
                dayPlan.exercises.forEach((exercise, index) => {
                    db.run(`INSERT INTO exercises (plan_id, name, sets, reps, rest_between_sets, rest_after_exercise, order_index) 
                            VALUES (?, ?, ?, ?, ?, ?, ?)`,
                        [planId, exercise.name, exercise.sets, exercise.reps, exercise.rest_between_sets, exercise.rest_after_exercise, index]);
                });
            }
        );
    });
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async function scheduleNotifications(userId) {
    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (jobs[userId]) {
        jobs[userId].forEach(job => job.cancel());
        delete jobs[userId];
    }

    jobs[userId] = [];

    db.all(`SELECT * FROM training_plans WHERE user_id = ?`, [userId], (err, plans) => {
        if (err) return console.error(err);

        plans.forEach(plan => {
            if (plan.is_rest_day || !plan.notification_time) return;

            const [hours, minutes] = plan.notification_time.split(':');
            
            // –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            db.all(`SELECT * FROM exercises WHERE plan_id = ? ORDER BY order_index`, [plan.id], (err, exercises) => {
                if (err) return console.error(err);

                if (exercises.length === 0) return;

                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                const rule = new schedule.RecurrenceRule();
                rule.dayOfWeek = plan.day_of_week;
                rule.hour = parseInt(hours);
                rule.minute = parseInt(minutes);
                rule.tz = 'Europe/Moscow';

                const job = schedule.scheduleJob(rule, async () => {
                    await startWorkoutSession(userId, plan.day_of_week, exercises);
                });

                jobs[userId].push(job);
                console.log(`‚è∞ Scheduled notification for user ${userId} on day ${plan.day_of_week} at ${plan.notification_time}`);
            });
        });
    });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async function startWorkoutSession(userId, dayOfWeek, exercises) {
    const dayNames = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—åe"];
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É
        db.run(`INSERT INTO workout_sessions (user_id, day_of_week, exercises_data, current_exercise_index) VALUES (?, ?, ?, ?)`,
            [userId, dayOfWeek, JSON.stringify(exercises), 0],
            async function(err) {
                if (err) {
                    console.error('Error saving workout session:', err);
                    return;
                }

                const sessionId = this.lastID;
                await sendExerciseToUser(userId, sessionId, dayOfWeek, exercises, 0);
            }
        );
    } catch (error) {
        console.error('Error starting workout session:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async function sendExerciseToUser(userId, sessionId, dayOfWeek, exercises, exerciseIndex) {
    const dayNames = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—åe"];
    
    if (exerciseIndex >= exercises.length) {
        await bot.telegram.sendMessage(userId, 
            `üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ ${dayNames[dayOfWeek]} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™\n–í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!`,
            { parse_mode: 'Markdown' }
        );
        
        // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        db.run(`DELETE FROM workout_sessions WHERE id = ?`, [sessionId]);
        return;
    }

    const exercise = exercises[exerciseIndex];
    
    try {
        await bot.telegram.sendMessage(userId,
            `üèãÔ∏è **${dayNames[dayOfWeek]} - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ${exerciseIndex + 1}/${exercises.length}**\n\n` +
            `**${exercise.name}**\n` +
            `üìä ${exercise.sets} –ø–æ–¥—Ö–æ–¥(–∞) √ó ${exercise.reps}\n` +
            `‚è±Ô∏è –û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏: ${exercise.rest_between_sets} —Å–µ–∫\n` +
            `üîÑ –û—Ç–¥—ã—Ö –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: ${exercise.rest_after_exercise} —Å–µ–∫\n\n` +
            `–ù–∞–∂–º–∏ "‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª" –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å –≤—Å–µ –ø–æ–¥—Ö–æ–¥—ã`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', callback_data: `complete_${sessionId}_${exerciseIndex}` }
                    ]]
                }
            }
        );
    } catch (error) {
        console.error('Error sending message to user:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.start(async (ctx) => {
    const user = ctx.from;
    await registerUser(user.id, user.username, user.first_name);
    
    await ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!\n\n` +
        `–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä! üèãÔ∏è\n\n` +
        `–û—Ç–∫—Ä–æ–π Web App —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:`,
        Markup.keyboard([
            [Markup.button.webApp('üìÖ –û—Ç–∫—Ä—ã—Ç—å TrainPlan', 'https://your-app-url.com')]
        ]).resize()
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
bot.on('callback_query', async (ctx) => {
    const userId = ctx.from.id;
    const callbackData = ctx.callbackQuery.data;

    if (callbackData.startsWith('complete_')) {
        const parts = callbackData.replace('complete_', '').split('_');
        const sessionId = parseInt(parts[0]);
        const exerciseIndex = parseInt(parts[1]);

        await ctx.answerCbQuery();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        db.get(`SELECT * FROM workout_sessions WHERE id = ? AND user_id = ?`, [sessionId, userId], async (err, session) => {
            if (err || !session) {
                await ctx.editMessageText('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const exercises = JSON.parse(session.exercises_data);
            const exercise = exercises[exerciseIndex];
            const today = new Date().toISOString().split('T')[0];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
            db.run(`INSERT INTO completed_workouts (user_id, exercise_name, completed_date) VALUES (?, ?, ?)`, 
                [userId, exercise.name, today]);

            await ctx.editMessageText(
                `‚úÖ **${exercise.name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n` +
                `–û—Ç–ª–∏—á–Ω–æ! ${exercise.sets} –ø–æ–¥—Ö–æ–¥(–∞) √ó ${exercise.reps} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n` +
                `–û—Ç–¥—ã—Ö ${exercise.rest_after_exercise} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...`,
                { parse_mode: 'Markdown' }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            const nextIndex = exerciseIndex + 1;
            db.run(`UPDATE workout_sessions SET current_exercise_index = ? WHERE id = ?`, [nextIndex, sessionId]);

            // –ñ–¥–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
            setTimeout(async () => {
                await sendExerciseToUser(userId, sessionId, session.day_of_week, exercises, nextIndex);
            }, (exercise.rest_after_exercise || 60) * 1000);
        });
    }
});

// Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authMiddleware = (req, res, next) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram Web App –¥–∞–Ω–Ω—ã—Ö
    req.user = { id: 1, telegram_id: 123456789 };
    next();
};

// API Endpoints (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
// ... [–∑–¥–µ—Å—å –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞] ...

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
async function start() {
    try {
        await bot.launch();
        console.log('ü§ñ Telegram bot started with PUSH notifications');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –≤ 00:01
        schedule.scheduleJob('1 0 * * *', () => {
            updateCurrentWeek();
            console.log('üìÖ Auto-updated week dates');
        });

        app.listen(PORT, '0.0.0.0', () => {
            console.log('='.repeat(60));
            console.log('üöÄ SERVER WITH PUSH NOTIFICATIONS STARTED!');
            console.log(`üìç Port: ${PORT}`);
            console.log('üìä Features: Bot notifications, User-defined rest days');
            console.log('='.repeat(60));
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            updateCurrentWeek();
        });
    } catch (error) {
        console.error('‚ùå Failed to start:', error);
    }
}

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë Stopping server...');
    Object.values(jobs).flat().forEach(job => job.cancel());
    bot.stop();
    db.close();
    process.exit(0);
});

start();